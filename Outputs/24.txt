Program Body
{
  int break_1_flag;
  break_1_flag = 0;
  int x;
  int A;
  int y;
  int m;
  while (x < A)
  {
    while ((y < m) && (break_1_flag == 0))
    {
      break_1_flag = 0;
      if (__VERIFIER_nondet_int() > 0)
      {
        break_1_flag = 1;
      }

      if (break_1_flag == 0)
      {
        y = y + 1;
      }

    }

    x = x + 1;
  }

}

'main'
Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ break_1_flag:int x:int A:int y:int m:int}

Output in normal notation:
1. Frame axioms:
A1 = A
m1 = m

2. Output equations:
break_1_flag1 = break_1_flag7(_N2)
x1 = (_N2+x)
y1 = y7(_N2)

3. Other axioms:
break_1_flag5((_n1+1),_n2) = ite((__VERIFIER_nondet_int2(_n1,_n2)>0),1,0)
y5((_n1+1),_n2) = ite((ite((__VERIFIER_nondet_int2(_n1,_n2)>0),1,0)==0),(y5(_n1,_n2)+1),y5(_n1,_n2))
break_1_flag5(0,_n2) = break_1_flag7(_n2)
y5(0,_n2) = y7(_n2)
((y5(_N1(_n2),_n2)>=m) or (break_1_flag5(_N1(_n2),_n2)!=0))
(_n1<_N1(_n2)) -> ((y5(_n1,_n2)<m) and (break_1_flag5(_n1,_n2)==0))
break_1_flag7((_n2+1)) = break_1_flag5(_N1(_n2),_n2)
y7((_n2+1)) = y5(_N1(_n2),_n2)
break_1_flag7(0) = 0
y7(0) = y
(_N2>=(A-x))
(_n2<_N2) -> ((_n2+x)<A)

4. Assumption :

5. Assertion :


Bound - O(_n) of the loop corresponds to loop constant _N1(_n2)
((m-y) or (0+1))
Bound - O(_n) of the loop corresponds to loop constant _N2
(A-x)
Final Complexity ---- O(_n**2)

