Program Body
{
  int A;
  int i;
  i = A;
  int k;
  k = 0;
  int j;
  j = 0;
  while (i > 1)
  {
    j = i;
    k = 0;
    while (j <= A)
    {
      k = 0;
      while (k < A)
      {
        k = k + 2;
      }

      j = j * 2;
    }

    i = i / 2;
  }

}

'main'
Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ A:int i:int k:int j:int}

Output in normal notation:
1. Frame axioms:
A1 = A

2. Output equations:
i1 = ((2**-(_N3))*A)
k1 = (2*_N1((_N2((_N3+1))+1),(_N3+1)))
j1 = ((2**((-(_N3)+_N2((_N3+1)))-1))*A)

3. Other axioms:
(_N1(_n2,_n3)>=((A/2)-(0/2)))
(_n1<_N1(_n2,_n3)) -> (((2*_n1)+0)<A)
(((2**_N2(_n3))*((2**-(_n3))*A))>A)
(_n2<_N2(_n3)) -> (((2**_n2)*((2**-(_n3))*A))<=A)
(((2**-(_N3))*A)<=1)
(_n3<_N3) -> (((2**-(_n3))*A)>1)

4. Assumption :

5. Assertion :


Bound - O(_n) of the loop corresponds to loop constant _N1(_n2,_n3)
(A/2)
Bound - O(log(_n)/log_1(2)) of the loop corresponds to loop constant _N2(_n3)
ForAll(_n3,Implies(And(_n3>=0,_n3<(log(A)/log_1(2))),log(2**(_n3 + 1))/log_1(2)))
Bound - O(log(_n)/log_1(2)) of the loop corresponds to loop constant _N3
log(A)/log_1(2)
Final Complexity ---- O(_n*log(_n)**2/log_1(2)**2)

