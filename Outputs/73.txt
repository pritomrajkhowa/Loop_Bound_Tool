Program Body
{
  int ticks;
  ticks = 0;
  int a;
  a = 0;
  while (a < N_var)
  {
    int b;
    b = 0;
    while (b < N_var)
    {
      int c;
      c = 0;
      while (c < N_var)
      {
        ticks = ticks + 1;
        c = c + 1;
      }

      b = b + 1;
    }

    a = a + 1;
  }

}

'counter'
Function Name:
counter
Return Type:
int
Input Variables:
{ N_var:int}
Local Variables:
{ ticks:int a:int b:int c:int}

Output in normal notation:
1. Frame axioms:
N_var1(N_var) = N_var

2. Output equations:
ticks1(N_var) = ticks5(_N2((_N3(N_var)+1),N_var),(_N3(N_var)+1),N_var)
a1(N_var) = (_N3(N_var)+0)
b1(N_var) = _N2((_N3(N_var)+1),N_var)
c1(N_var) = _N1((_N2((_N3(N_var)+1),N_var)+1),(_N3(N_var)+1),N_var)

3. Other axioms:
(_N1(_n2,_n3,N_var)>=(N_var-0))
(_n1<_N1(_n2,_n3,N_var)) -> ((_n1+0)<N_var)
ticks5((_n2+1),_n3,N_var) = (_N1(_n2,_n3,N_var)+ticks5(_n2,_n3,N_var))
ticks5(0,_n3,N_var) = ticks5(_N2((_n3+1),N_var),(_n3+1),N_var)
(_N2(_n3,N_var)>=(N_var-0))
(_n2<_N2(_n3,N_var)) -> ((_n2+0)<N_var)
(_N3(N_var)>=(N_var-0))
(_n3<_N3(N_var)) -> ((_n3+0)<N_var)

4. Assumption :

5. Assertion :


Bound - O(_n) of the loop corresponds to loop constant _N1(_n2,_n3,N_var)
N_var
Bound - O(_n) of the loop corresponds to loop constant _N2(_n3,N_var)
N_var
Bound - O(_n) of the loop corresponds to loop constant _N3(N_var)
N_var
Final Complexity ---- O(_n**3)

