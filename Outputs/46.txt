Program Body
{
  int X;
  int Y;
  int r;
  int ds;
  int p;
  int q;
  r = X;
  ds = Y;
  p = 1;
  q = 0;
  while (r >= ds)
  {
    ds = 2 * ds;
    p = 2 * p;
  }

  while (p != 1)
  {
    ds = ds / 2;
    p = p / 2;
    if (r >= ds)
    {
      r = r - ds;
      q = q + p;
    }

  }

}

'main'
Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ X:int Y:int r:int ds:int p:int q:int}

Output in normal notation:
1. Frame axioms:
X1 = X
Y1 = Y

2. Output equations:
r1 = r7(_N2)
ds1 = ((2**-(_N2))*((2**_N1)*Y))
p1 = ((2**-(_N2))*((2**_N1)*1))
q1 = q7(_N2)

3. Other axioms:
(X<((2**_N1)*Y))
(_n1<_N1) -> (X>=((2**_n1)*Y))
r7((_n2+1)) = ite((r7(_n2)>=(((2**-(_n2))*((2**_N1)*Y))/2)),(r7(_n2)-(((2**-(_n2))*((2**_N1)*Y))/2)),r7(_n2))
q7((_n2+1)) = ite((r7(_n2)>=(((2**-(_n2))*((2**_N1)*Y))/2)),(q7(_n2)+(((2**-(_n2))*((2**_N1)*1))/2)),q7(_n2))
r7(0) = X
q7(0) = 0
(((2**-(_N2))*((2**_N1)*1))==1)
(_n2<_N2) -> (((2**-(_n2))*((2**_N1)*1))!=1)

4. Assumption :

5. Assertion :


Bound - O(log(_n)/log_1(2)) of the loop corresponds to loop constant _N1
log(2*X/Y)/log_1(2)
Bound - O(_n) of the loop corresponds to loop constant _N2
_N1
Final Complexity ---- O(_n + log(_n)/log_1(2))

