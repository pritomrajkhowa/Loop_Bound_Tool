Program Body
{
  int A;
  int i;
  int j;
  i = 0;
  while (i < A)
  {
    j = i + 1;
    while (j < A)
    {
      if (__VERIFIER_nondet_int() > 0)
      {
        j = j - 1;
        A = A - 1;
      }

      j = j + 1;
    }

    i = i + 1;
  }

}

'main'
Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ A:int i:int j:int}

Output in normal notation:
1. Frame axioms:

2. Output equations:
A1 = A7(_N2)
i1 = (_N2+0)
j1 = j7(_N2)

3. Other axioms:
A4((_n1+1),_n2) = ite((__VERIFIER_nondet_int2(_n1,_n2)>0),(A4(_n1,_n2)-1),A4(_n1,_n2))
j4((_n1+1),_n2) = (ite((__VERIFIER_nondet_int2(_n1,_n2)>0),(j4(_n1,_n2)-1),j4(_n1,_n2))+1)
A4(0,_n2) = A7(_n2)
j4(0,_n2) = ((_n2+0)+1)
(0<=(-(A4(_N1(_n2),_n2))+j4(_N1(_n2),_n2)))
(_n1<_N1(_n2)) -> (j4(_n1,_n2)<A4(_n1,_n2))
A7((_n2+1)) = A4(_N1(_n2),_n2)
j7((_n2+1)) = j4(_N1(_n2),_n2)
A7(0) = A
j7(0) = j
(_N2>=(-(0)+A7(_N2)))
(_n2<_N2) -> ((_n2+0)<A7(_n2))

4. Assumption :

5. Assertion :


Bound - O(_n) of the loop corresponds to loop constant _N1(_n2)
((A-1) or -(1))
Bound - O(1) of the loop corresponds to loop constant _N2
(1 or A)
Final Complexity ---- O(_n)

