Program Body
{
  int A;
  int B;
  int i;
  i = A;
  int k;
  k = 0;
  int j;
  j = 0;
  while (i > B)
  {
    k = 1;
    j = 1;
    while (j <= A)
    {
      k = k + 1;
      j = j + k;
    }

    i = i / 2;
  }

}

'main'
Function Name:
main
Return Type:
int
Input Variables:
{}
Local Variables:
{ A:int B:int i:int k:int j:int}

Output in normal notation:
1. Frame axioms:
A1 = A
B1 = B

2. Output equations:
i1 = ((2**-(_N2))*A)
k1 = (_N1((_N2+1))+1)
j1 = j6(_N2)

3. Other axioms:
(((((((2*_N1(_n2))*1)+_N1(_n2))+(2*1))+(_N1(_n2)**2))/2)>A)
(_n1<_N1(_n2)) -> (((((((2*_n1)*1)+_n1)+(2*1))+(_n1**2))/2)<=A)
j6((_n2+1)) = ((((((2*_N1(_n2))*1)+_N1(_n2))+(2*1))+(_N1(_n2)**2))/2)
j6(0) = 0
(((2**-(_N2))*A)<=B)
(_n2<_N2) -> (((2**-(_n2))*A)>B)

4. Assumption :

5. Assertion :


Bound - O(sqrt(_n)) of the loop corresponds to loop constant _N1(_n2)
((sqrt(((8*A)+1))/2)-(1/2))
Bound - O(log(_n)/log_1(2)) of the loop corresponds to loop constant _N2
log(A/B)/log_1(2)
Final Complexity ---- O(sqrt(_n)*log(_n)/log_1(2))

